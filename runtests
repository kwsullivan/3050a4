#!/bin/sh

# fifo/sock paths
FIFO_S="/tmp/server-${USER}-fifo"
SOCK_S="/tmp/server-${USER}-sock"
FIFO_P="/tmp/processor-${USER}-fifo"
LOG_P="/tmp/processor-${USER}.log"

# testing paths
OUT_T="./testing/output/"
LOG_S="./log/server.log"

SLEEP=0.1


# get number of processors and colour codes based on OS (Darwin/Linux)
OS=$(eval uname)
if [ "$OS" = "Darwin" ]; then
    NUM_CORES=$(eval sysctl -n hw.ncpu)
    NO_COLOUR="\x1b[0m"
    OK_COLOUR="\x1b[102;01m"
    ERROR_COLOUR="\x1b[101;01m"
    HEADER_COLOUR="\x1b[1;4;46m"
    TITLE_COLOUR="\x1b[47;01m"
    BLUE_COLOUR="\x1b[104m"
elif [ "$OS" = "Linux" ]; then
    NUM_CORES=$(eval nproc)
    NO_COLOUR="\e[0m"
    OK_COLOUR="\e[32m"
    ERROR_COLOUR="\e[31m"
    HEADER_COLOUR="\e[1;4m"
    TITLE_COLOUR="\e[47;02m"
    BLUE_COLOUR="\e[44m"
else
    NUM_CORES='0'
fi

# outputs testing text formatted to colour codes
output() {
    TYPE=$1
    MSG=$2
    if [ X"$TYPE" = X"OK" ]
    then
        echo ${OK_COLOUR}"OK : ${MSG}"${NO_COLOUR}
    fi
    if [ X"$TYPE" = X"ERROR" ]
    then
        echo ${ERROR_COLOUR}"ERROR : ${MSG}"${NO_COLOUR}
    fi
    if [ X"$TYPE" = X"HEADER" ]
    then
        echo ${HEADER_COLOUR}"${MSG}"${NO_COLOUR}
    fi
    if [ X"$TYPE" = X"TITLE" ]
    then
        echo ${TITLE_COLOUR}"${MSG}"${NO_COLOUR}
    fi
}

# remove

# checks the existence of a pipe/socket (determined by TYPE) and stores the output in a file
check_exists() {
    TYPE=$1
    FLAG=$2
    FILE=$3

    if [ ${FLAG} ${FILE} ]; then
        output "OK" "${TYPE} found."
    else
        output "ERROR" "${TYPE} not found."
    fi
}

check_commandFIFO() {
    COMMAND=$(echo `$1`)
    LOG=$(echo `cat $2`)
    OUTPUT_FILE=$3
    if [ "$LOG" == *"$COMMAND"* ]; then
        output "OK" "The command $1 succeeded in ${2}."
    else
        output "ERROR" "The command $1 failed in ${2}."
    fi
}

check_status() {
    EXPECTED_JOBS=$1
    SERVER_LOG=$(echo `cat $2`)
    EXPECTED_STATUS="Jobs Completed : ${EXPECTED_JOBS}"
    if [ "$SERVER_LOG" == *"$EXPECTED_JOBS"* ]; then
        output "OK" "Server status reported ${EXPECTED_JOBS} jobs."
    else
        output "ERROR" "Server status did not report ${EXPECTED_JOBS} jobs."
    fi
}

# makes sure there are more than 0 cores running

output "TITLE" "TEST : detecting processing cores"
if [ ! ${NUM_CORES} -eq "0" ]; then
    output "OK" "${NUM_CORES} detected."
else
    output "ERROR" "${NUM_CORES} detected."
    echo "Testing cannot continue as there are no detected processors."
    exit
fi

# Setup tests
output "HEADER" "Beginning setup tests..."
output "TITLE" "TEST : creating all fifos and socket"
check_exists "SERVER" "-p" "${FIFO_S}"
core=0
while [ $core -lt ${NUM_CORES} ]
do
    check_exists "PROCESSOR" "-p" "${FIFO_P}.$core"
    core=$(( $core + 1 ))
done

check_exists "SOCKET" "-S" "${SOCK_S}"

echo "----------"

# FIFO Command Tests
output "HEADER" "Beginning FIFO and status tests..."

# test ls command on all processors
output "TITLE" "TEST : ls command on all processors"
core=0
while [ $core -lt ${NUM_CORES} ]
do
    echo ls > ${FIFO_S}
    sleep ${SLEEP}
    check_commandFIFO "ls" "${LOG_P}.$core" "${OUT_T}test_command.$core"
    core=$(( $core + 1 ))
done

echo "----------"

# test status command after all processors used once
output "TITLE" "TEST : status command after n jobs where n=number of processors"
echo status > ${FIFO_S}
sleep ${SLEEP}
check_status "${NUM_CORES}" "${LOG_S}"
echo "----------"

# test pwd command on all processors
output "TITLE" "TEST : pwd command on all processors"
core=0
while [ $core -lt ${NUM_CORES} ]
do
    echo pwd > ${FIFO_S}
    sleep ${SLEEP}
    check_commandFIFO "pwd" "${LOG_P}.$core" "${LOG_S}"
    core=$(( $core + 1 ))
done
echo "----------"

# test status command after all processors used twice
output "TITLE" "TEST : status command after 2n jobs where n=number of processors"
echo status > ${FIFO_S}
sleep ${SLEEP}
check_status "$((${NUM_CORES} + ${NUM_CORES}))" "${LOG_S}"
echo "----------"

output "HEADER" "Beginning socket tests..."

output "TITLE" "TEST : command ls -l on all processors using the socket"


core=0
while [ $core -lt ${NUM_CORES} ]
do
    $(python mgSubmitJob "ls -l")
    sleep ${SLEEP}
    check_commandFIFO "ls -l" "${LOG_P}.$core" "${LOG_S}"
    core=$(( $core + 1 ))
done
echo "----------"

core=0
counter=0
max=$(( ${NUM_CORES} + 2))
num_sleep=$(( $max * 2))
output "TITLE" "TEST : timedCountdown to execute $max times using the socket"
echo "This will take approximately $num_sleep seconds..."
while [ $counter -lt $max ]
do
    $(python mgSubmitJob "sh timedCountdown")

    core=$(( $core + 1 ))
    counter=$(( $counter + 1 ))
    if [ $core -eq ${NUM_CORES} ]; then
        core='0'
    fi
done
sleep ${num_sleep}
NUM_EXECS=$(grep -c "sh timedCountdown" ${LOG_S})

if [ $NUM_EXECS -eq $max ]; then
    output "OK" "timedCountdown successfully executed $max times."
else
    output "ERROR" "timedCountdown failed to execute $max times."
fi
echo "----------"

output "TITLE" "TEST : shutdown to kill all processes, the socket, and the server"
echo "This will take approximately $num_sleep seconds..."
sleep ${num_sleep}
$(python mgSubmitJob "shutdown")
sleep ${SLEEP}

# checks the existance of the socket to see if it closed successfully
if [ ! -S ${SOCK_S} ]; then
    output "OK" "Socket successfully closed."
else
    output "ERROR" "Socket did not close."
fi

# checks number of server processes still running
# (should be 1 because the ps command counts)
PROCESS_COUNT=$(echo `ps aux | grep ${FIFO_P}.* | wc -l`)
if [ "$PROCESS_COUNT" -eq "1" ]; then
    output "OK" "Processors successfully terminated."
else
    output "ERROR" "Processors did not terminate."
fi
# checks number of server processes still running
# (should be 1 because the ps command counts)
SERVER_COUNT=$(echo `ps aux | grep ${FIFO_S} | wc -l`)
if [ "$SERVER_COUNT" -eq "1" ]; then
    output "OK" "Server successfully terminated."
else
    output "ERROR" "Server did not terminate."
fi

output "HEADER" "Testing completed."