#!/bin/sh

# set up some globals
FIFO_S="/tmp/server-${USER}-fifo"
FIFO_P="/tmp/processor-${USER}-fifo"
LOG_P="/tmp/processor-${USER}.log"
NUM_CORES=0

# process command line options (so that number of processors can be overridden)
PRINT_HELP="NO"
for arg in "$@"
do
	case "${arg}" in
	-[h?]*)
		PRINT_HELP="YES"
		;;
	-[n?]*)
		NUM_CORES= `echo ${arg} | cut -c 3,4`
        echo ${NUM_CORES}
		;;
	-*)
		echo "Unknown option '${arg}'" >&2
        exit -1
		;;
	*)
		echo "Unknown argument '${arg}'" >&2
        exit -1
		;;
	esac
done


# if help was requested, print it to stderr and exit
if [ X"$PRINT_HELP" = X"YES" ]
then
    echo "$0 <options>" >&2
    echo "Option:" >&2
    echo "-h    : help - this is it" >&2
    echo "-n<N> : set the number of processing units to <N>" >&2
    exit -1
fi

eval "rm -f ${FIFO_S}"

OS=$(eval uname)
echo ${OS}

# calculate default number of processors if variable is unset ( -n )
if [ ${NUM_CORES} -eq "0" ]; then
    if [ "$OS" = "Darwin" ]; then
        NUM_CORES=$(eval sysctl -n hw.ncpu)
    elif [ "$OS" = "Linux" ]; then
        NUM_CORES=$(eval nproc)
    else
        NUM_CORES=0
    fi
fi
core=0
declare -a job_status
while [ $core -lt ${NUM_CORES} ]
do
    if [ ! -p ${FIFO_P}.$core ]; then
    mkfifo ${FIFO_P}.$core
    fi
    umask 0077 ${FIFO_P}.$core
    (exec  sh mgProcessor ${FIFO_P}.$core ${LOG_P}.$core $core &)
    job_status[$core]=0
    core=$(( $core + 1 ))
done



echo "Starting up ${NUM_CORES} processing units"

if
    mkfifo ${FIFO_S}
then
    echo "Ready for processing : place jobs into ${FIFO_S}"
else
    echo "Error: FIFO could not be created (${FIFO_S})"
fi

core=0
while read line < ${FIFO_S}
do
    if [ "$line" = 'shutdown' ]
    then
        core=0
        while [ $core -lt ${NUM_CORES} ]
        do
            (echo "quit" > ${FIFO_P}.$core)
            core=$(( $core + 1 ))
        done
        # leave the while loop
        break
    elif [ "$line" = 'status' ]
    then
        printf "PID JOBS COMPLETED\n"
        core=0
        while [ $core -lt ${NUM_CORES} ]
        do
            printf "%d %16d\n" $core ${job_status[$core]}
            #echo "Processor $core: ${job_status[$core]}"
            core=$(( $core + 1 ))
        done
    else
        echo "Command on server: $line"
        ( echo $line > ${FIFO_P}.$core )
        job_status[$core]=$(( ${job_status[$core]} + 1 ))
        echo "JOB $core: ${job_status[$core]}"
        core=$(( $core + 1 ))
        if [ $core -eq "4" ]; then
            core=0
        fi
    fi

done

#
echo "Server exiting"