#!/bin/sh

# set up some globals
FIFO_S="/tmp/server-${USER}-fifo"
FIFO_P="/tmp/processor-${USER}-fifo"

eval "rm -f ${FIFO_S}"
eval "rm -f ${FIFO_P}"

if
    mkfifo ${FIFO_S}
then
    echo "Successfully created FIFO (named pipe) ${FIFO_S}"
else
    echo "Error: Failed creating FIFO ${FIFO_S}"
fi

if
    mkfifo ${FIFO_P}
then
    echo "Successfully created FIFO (named pipe) ${FIFO_P}"
else
    echo "Error: Failed creating FIFO ${FIFO_P}"
fi

#eval mkfifo ${FIFO_S}

OS=$(eval uname)
echo ${OS}

# calculate default number of processors
if [ "$OS" = "Darwin" ]; then
	NUM_CORES=$(eval sysctl -n hw.ncpu)
elif [ "$OS" = "Linux" ]; then
	NUM_CORES=$(eval nproc)
else
	NUM_CORES=0
fi

echo "Starting up ${NUM_CORES} processing units"
# process command line options (so that number of processors can be overridden)
PRINT_HELP="NO"
for arg in "$@"
do
	case "${arg}" in
	-[h?]*)
		PRINT_HELP="YES"
		;;
	-[n?]*)
		echo hello
		;;
	-*)
		echo "Unknown option '${arg}'" >&2
        exit -1
		;;
	*)
		echo "Unknown argument '${arg}'" >&2
        exit -1
		;;
	esac
done


# if help was requested, print it to stderr and exit
if [ X"$PRINT_HELP" = X"YES" ]
then
    echo "$0 <options>" >&2
    echo "Option:" >&2
    echo "-h    : help - this is it" >&2
    echo "-n<N> : set the number of processing units to <N>" >&2
    exit -1
fi

while read line < ${FIFO_S}
do
    if [ "$line" = 'quit' ]
    then
        # leave the while loop
        break
    else
        echo "Command on server: $line"
        echo $line > ${FIFO_P} &
        (exec  sh fiforeaderPiecewise ${FIFO_P})
        echo "ok"
    fi
    # print out what we got
    #( exec  sh fiforeaderPiecewise ${FIFO_P})
    #echo $line > ${FIFO_P}
    #exec  sh fiforeaderPiecewise ${FIFO_P} &
done

# 
echo "Reader exiting"




# # Bundle the loop within a group so that a single open is performed
# {
#     while read line
#     do
#         if [ "$line" = 'quit' ]
#         then
#             # leave the while loop
#             break
#         fi
#         # print out what we got
#         echo $line
#         #echo $line > ${FIFO_P}
#         #( exec  sh fiforeaderPiecewise ${FIFO_P})
#     done
# } < ${FIFO_S}

# # 
# echo "Reader exiting"