#!/usr/bin/env python2

import socket
import getpass
import sys
import os
import subprocess

if len(sys.argv) != 2:
    print >> sys.stderr, sys.argv[0], "takes exactly one argument - the FIFO"
    sys.exit(-1)

# record the name of the FIFO we echo everything to
FIFO_NAME = sys.argv[1]


# set up the name of the socket that we want to use
FILE_ADDRESS = "/tmp/server-%s-sock" % getpass.getuser()



# create socket of type AF_UNIX
try:
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
except OSError, msg:
    print >> sys.stderr, "Error opening stream socket:", msg
    sys.exit(1)


# bind and listen for incoming connections
try:
    sock.bind(FILE_ADDRESS)
except OSError, msg:
    print >> sys.stderr, "Error binding stream socket:", msg
    sys.exit(1)

print "Socket has name", FILE_ADDRESS

sock.listen(5)

# process connections as they come in

# loop until told to "quit"
keepGoing = True
while keepGoing:
    # we get a _second_ socket to read the message from
    try:
        msgsock, clientAddress = sock.accept()
    except OSError, msg:
        print >> sys.stderr, "Error from accept on stream socket:", msg
        sys.exit(1)

    message = True
    while message and keepGoing:

        try:
            message = msgsock.recv(1024)
        except OSError, msg:
            print >> sys.stderr, "Error reading stream message:", msg
            sys.exit(1)

        if message:
            sys.stdout.write("got -->%s\n" % message)
            cmd = "echo {} > {}".format(message, FIFO_NAME)
            print "{}".format(cmd)
            os.system(cmd)
            # process = subprocess.Popen(message, stdout=FIFO_NAME)
            # output, error = process.communicate()

            if message == "quit":
                keepGoing = False
        else:
            pass


    # close the message socket and go back to waiting on the stream socket
    msgsock.close()

print "Told to quit, so cleaning up..."
sock.close()

os.unlink(FILE_ADDRESS)

sys.exit(0)